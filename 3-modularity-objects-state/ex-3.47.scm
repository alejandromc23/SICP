(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))

(define (clear! cell)
  (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))

; part a
(define (make-bus n)
  (let ((mutex (make-mutex))
        (occupied 0))
    (define (the-bus m)
      (cond ((eq? m 'acquire)
             (mutex 'acquire)
              (if (= occupied n)
                  (begin (mutex 'release)
                          (the-bus 'acquire)))
              (set! occupied (+ occupied 1))
              (mutex 'release))
            ((eq? m 'release)
              (mutex 'acquire)
              (set! occupied (- occupied 1))
              (mutex 'release))))
    the-bus))

; part b
(define (make-bus n)
  (let ((cell (list false))
        (occupied 0))

    (define (acquire)
      (if (test-and-set! cell)
          (acquire)))

    (define (the-bus m)
      (cond ((eq? m 'acquire)
             (acquire)
             (if (= occupied n)
                (begin (clear! cell)
                       (the-bus 'acquire)))
             (set! occupied (+ occupied 1))
             (clear! cell)
            (eq? m 'release)
              (acquire)
              (set! occupied (- occupied 1))
              (clear! cell))))
    the-bus))
