(define (expt-mod base expt m) 
    (cond ((= expt 0) 1)
          ((even? expt) (nontrivial-checked (expt-mod base (/ expt 2) m) m))
          (else (remainder (* base (expt-mod base (- expt 1) m)) m))
    )
)

(define (nontrivial-checked a n)
    (if (and (not (or (= a 1) (= a (- n 1)))) 
            (= (remainder (square a) n) 1))
        0
        (remainder (square a) n)
    )
)

(define (miller-rabin-test n)
    (define (try-it a)
        (= (expt-mod a (- n 1) n) 1)
    )
    (try-it (+ 1 (random (- n 1))))
)

(define (miller-rabin-prime?  n times)
  (cond ((= times 0) #t)
        ((miller-rabin-test n)
         (miller-rabin-prime? n (- times 1)))
        (else #f)))

(miller-rabin-prime? 17 10)
(miller-rabin-prime? 23 10)
(miller-rabin-prime? 561 10)
(miller-rabin-prime? 1105 10)
(miller-rabin-prime? 1729 10)
(miller-rabin-prime? 2465 10)
(miller-rabin-prime? 2821 10)
(miller-rabin-prime? 6601 10)
